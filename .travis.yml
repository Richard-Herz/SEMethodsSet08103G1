#language: java
#
#sudo: false
#
#addons:
#  hosts:
#    -db
#
#services:
#- docker
#
#install:
#- docker build -t database db/.
#- docker run --rm -d -e MYSQL_ROOT_PASSWORD=password -p 33060:3306 database
#- mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
#
#before_script:
#- mvn clean
#
#jobs:
#  include:
#  - stage: unit tests
#    install: skip
#    jdk: oraclejdk11
#    script: mvn test -Dtest=SEMethods088103G1CW.Tests
#  - stage: integration tests
#    jdk: oraclejdk11
#    script: mvn test -Dtest=SEMethods088103G1CW.IntegrationTest
#  - stage: deploy
#    install: skip
#    jdk: oraclejdk11
#    script: echo "Deploy"
#
#stages:
#- unit tests
#- integration tests
#- name: deploy
#  if: branch = develop

language: java

sudo: false

addons:
  hosts:
  - db

env:
global:
- CLOUDSDK_CORE_DISABLE_PROMPTS=1

services:
- docker

before_install:
- openssl aes-256-cbc -K $encrypted_ccd611b0e41a_key -iv $encrypted_ccd611b0e41a_iv
  -in client-secret.json.enc -out client-secret.json -d

install:
- docker build -t database src/db/.
- docker run --rm -d -e MYSQL_ROOT_PASSWORD=password  -p 33060:3306 database
- mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

before_script:
- mvn clean

jobs:
  include:
  - stage: unit tests
    install: skip
    jdk: oraclejdk11
    script: mvn test -Dtest=SEMethodsSet088103G1CW.Tests
  - stage: integration tests
    jdk: oraclejdk11
    script: mvn test -Dtest=SEMethodsSet088103G1CW.IntegrationTest
  - stage: GitHub Release
    install: skip
    jdk: oraclejdk11
    script:
    - echo "Deploying to GitHub releases"
    - mvn package -DskipTests=true -Dmaven.javadoc.skip=true
  before_deploy:
  # Set up git user name and tag this commit
  - git config --local user.name "Calder-MacLean"
  - git config --local user.email "caldmac08@icloud.com"
  # Create temporary tag from date and Git log.
  - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y-%m-%d')-$(git log --format=%h -1)}
  # Set tag
  - git tag $TRAVIS_TAG
  deploy:
    provider: releases
    api_key: $GITHUB_OAUTH_TOKEN
    file: SEMethods088103G1CW.jar
    skip_cleanup: true
    on:
      tags: true
  - stage: Google Cloud Deploy
    install: skip
    jdk: oraclejdk11
    before_script:
    # Check if Google Cloud SDK is installed.
    - if [ ! -d ${HOME}/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash
        > /dev/null; fi
    - source $HOME/google-cloud-sdk/path.bash.inc
    # Install Kubernetes control to manage containers
    - gcloud components install kubectl
    - gcloud version
    # Login to our Google Cloud Account using credentials file
    - gcloud auth activate-service-account --key-file client-secret.json
    script:
    # Set the project we will work in.
    - gcloud config set project semethods-234809
    # Set the zone to work in.
    - gcloud config set compute/zone europe-west2-b
    # Assign project ID to a variable to make life easier
    - export PROJECT_ID="$(gcloud config get-value project -q)"
    # Authenticate against Google's Docker image manager.
    - gcloud auth configure-docker
    # Build the database image.
    - docker build -t gcr.io/${PROJECT_ID}/db db/.
    # Push the database image.
    - docker push gcr.io/${PROJECT_ID}/db
    # Create a container cluster.  We only need one node.
    - gcloud container clusters create hr-cluster --num-nodes=1
    # Tell kubernetes to run the built database image, opening port 3306
    - kubectl run hr --image=gcr.io/${PROJECT_ID}/db --port 3306
    # Expose the cluster to the Internet, mapping external port 3306 to internal port 3306.
    - kubectl expose deployment hr --port=3306 --target-port=3306 --type=LoadBalancer


stages:
- unit tests
- integration tests
- name: GitHub Release
  if: branch = develop
- name: deploy
  if: branch = develop


after_success:
- bash <(curl -s https://codecov.io/bash)

before_install:
# Decrypts the credentials file.
# The keyname will be different for your project.
- openssl aes-256-cbc -K $encrypted_b295e594d102_key -iv $encrypted_b295e594d102_iv
  -in client-secret.json.enc -out client-secret.json -d